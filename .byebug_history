q
c
formatted_tax.to_f
formatted_tax
q
a.mult(Complex(3, 0), 0) 
a.mult(Rational(3, 1), 0)
b.mult(Rational(3, 1), 0)
a.mult(3, 3)              
b.mult(3, 3)              # => 0.167e7
a.mult(3, 0)
a = BigDecimal('0.00')
a.mult(3, 0)
BigDecimal.mode(BigDecimal::ROUND_MODE, :half_up)
a.mult(3, 0)
a = BigDecimal('0.00')
format('%.2f', 0.0).to_f
format('%.2f', 0.0)
BigDecimal("0.00").precision
(0.00 * 10**p).round.to_f 
BigDecimal("0.00").precision
a = BigDecimal.new
BigDecimal("0.00")
BigDecimal.new("0.00")
Bigdecimal.new("0.00")
Bigdecimal.new("0.00)
s.to_f
s = "%.2f" % 0.0
s = "%.2f" % x
0.00 * 10.00
0.0 * 10.00
0.0 + 10
0.00.to_f
0.00.round(3)
0.00.round
(0.00 * 10**p).round.to_f / 10**p
self
0.00.to_f
tax
q
tax
q
BigDecimal("0.00")
profit_or_loss
tax
q
tax
c
taxes
n
c
taxes
transaction
c
transaction
c
@transactions
c
n
portfolio.handle_loss(profit_or_loss.abs)
c
format('%.2f', 0.0)
n
c
format('%.2f', (profit * 0.20))
n
c
format('%.2f', (profit * 0.20))
n
c
format('%.2f', 0.0)
n
c
format('%.2f', 0.0)
n
c
total_sale_amount
c
total_sale_amount
profit
c
profit
c
profit
c
profit
q
c
n
format('%.2f', (profit * 0.2)).to_f
profit
total_sale_amount
format('%.2f', 0.0).to_f
total_sale_amount > 20000 && profit > 0
q
c
output.strip
 StringIO.new(input)
output
n
input
c
sell_transaction
tax
new_portfolio
c
new_portfolio.current_shares
new_portfolio
